{"version":3,"file":"wretch.js","sources":["../../src/mix.ts","../../src/config.ts","../../src/perfs.ts","../../src/resolver.ts","../../src/wretcher.ts","../../src/index.ts"],"sourcesContent":["export const mix = function(one: object, two: object, mergeArrays: boolean = false) {\n    if(!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n        return one\n\n    const clone = { ...one }\n    for(const prop in two) {\n        if(two.hasOwnProperty(prop)) {\n            if(two[prop] instanceof Array && one[prop] instanceof Array) {\n                clone[prop] = mergeArrays ? [ ...one[prop], ...two[prop] ] : two[prop]\n            } else if(typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n                clone[prop] = mix(one[prop], two[prop], mergeArrays)\n            } else {\n                clone[prop] = two[prop]\n            }\n        }\n    }\n\n    return clone\n}\n","export default {\n    // Default options\n    defaults: {},\n    // Error type\n    errorType: null,\n    // Polyfills\n    polyfills: {\n        fetch: null,\n        FormData: null,\n        URLSearchParams: null,\n        performance: null,\n        PerformanceObserver: null\n    }\n}\n","import conf from \"./config\"\n\nconst onMatch = (entries, name, callback, _performance) => {\n    const matches = entries.getEntriesByName(name)\n    if(matches && matches.length > 0) {\n        callback(matches.reverse()[0])\n        _performance.clearMeasures(name)\n        perfs.callbacks.delete(name)\n\n        if(perfs.callbacks.size < 1) {\n            perfs.observer.disconnect()\n            if(_performance.clearResourceTimings) {\n                _performance.clearResourceTimings()\n            }\n        }\n        return true\n    }\n    return false\n}\n\nconst lazyObserver = (_performance, _observer) => {\n    if(!perfs.observer && _performance && _observer) {\n        perfs.observer = new _observer(entries => {\n            perfs.callbacks.forEach((callback, name) => {\n                onMatch(entries, name, callback, _performance)\n            })\n        })\n        if(_performance.clearResourceTimings) _performance.clearResourceTimings()\n    }\n    return perfs.observer\n}\n\nconst perfs = {\n    callbacks: new Map(),\n    observer: null,\n    observe: (name, callback) => {\n        if(!name || !callback)\n            return\n\n        const _performance = conf.polyfills.performance || (typeof self !== \"undefined\" ? self[\"performance\"] : null)\n        const _observer  = conf.polyfills.PerformanceObserver || (typeof self !== \"undefined\" ? self[\"PerformanceObserver\"] : null)\n\n        if(!lazyObserver(_performance, _observer))\n            return\n\n        if(!onMatch(_performance, name, callback, _performance)) {\n            if(perfs.callbacks.size < 1)\n                perfs.observer.observe({ entryTypes: [\"resource\", \"measure\"] })\n            perfs.callbacks.set(name, callback)\n        }\n\n    }\n}\n\nexport default perfs\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport perfs from \"./perfs\"\n\nexport type WretcherError = Error & { status: number, response: Response, text?: string, json?: any }\n\nexport const resolver = url => (catchers: Map<number, (error: WretcherError) => void> = new Map()) => (opts = {}) => {\n    const req = (conf.polyfills.fetch || fetch)(url, mix(conf.defaults, opts))\n    const wrapper: Promise<void | Response> = req.then(response => {\n        if (!response.ok) {\n            return response[conf.errorType || \"text\"]().then(_ => {\n                const err = new Error(_)\n                err[conf.errorType] = _\n                err[\"status\"] = response.status\n                err[\"response\"] = response\n                throw err\n            })\n        }\n        return response\n    })\n\n    type TypeParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Result>\n\n    const doCatch = <T>(promise: Promise<T>): Promise<void | T> => {\n        return promise.catch(err => {\n            if(catchers.has(err.status))\n                catchers.get(err.status)(err)\n            else\n                throw err\n        })\n    }\n    const wrapTypeParser: TypeParser = <T>(funName) => <R>(cb) => funName ?\n        doCatch(wrapper.then(_ => _ && _[funName]()).then(_ => _ && cb && cb(_) || _)) :\n        doCatch(wrapper.then(_ => _ && cb && cb(_) || _))\n\n    const responseTypes: {\n        res: <Result = Response>(cb?: (type: Response) => Result) => Promise<Result>,\n        json: <Result = {[key: string]: any}>(cb?: (type: {[key: string]: any}) => Result) => Promise<Result>,\n        blob: <Result = Blob>(cb?: (type: Blob) => Result) => Promise<Result>,\n        formData: <Result = FormData>(cb?: (type: FormData) => Result) => Promise<Result>,\n        arrayBuffer: <Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result) => Promise<Result>,\n        text: <Result = string>(cb?: (type: string) => Result) => Promise<Result>,\n        perfs: (cb?: (type: any) => void) => typeof responseTypes,\n        error: (code: number, cb: any) => typeof responseTypes,\n        badRequest: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        unauthorized: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        forbidden: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        notFound: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        timeout: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        internalError: (cb: (error: WretcherError) => void) => typeof responseTypes\n    } = {\n        /**\n         * Retrieves the raw result as a promise.\n         */\n        res: wrapTypeParser<Response>(null),\n        /**\n         * Retrieves the result as a parsed JSON object.\n         */\n        json: wrapTypeParser<any>(\"json\"),\n        /**\n         * Retrieves the result as a Blob object.\n         */\n        blob: wrapTypeParser<Blob>(\"blob\"),\n        /**\n         * Retrieves the result as a FormData object.\n         */\n        formData: wrapTypeParser<FormData>(\"formData\"),\n        /**\n         * Retrieves the result as an ArrayBuffer object.\n         */\n        arrayBuffer: wrapTypeParser<ArrayBuffer>(\"arrayBuffer\"),\n        /**\n         * Retrieves the result as a string.\n         */\n        text: wrapTypeParser<string>(\"text\"),\n        /**\n         * Performs a callback on the API performance timings of the request.\n         *\n         * Warning: Still experimental on browsers and node.js\n         */\n        perfs: cb => {\n            req.then(res => perfs.observe(res.url, cb))\n            return responseTypes\n        },\n        /**\n         * Catches an http response with a specific error code and performs a callback.\n         */\n        error(code: number, cb) {\n            catchers.set(code, cb)\n            return responseTypes\n        },\n        /**\n         * Catches a bad request (http code 400) and performs a callback.\n         */\n        badRequest: cb => responseTypes.error(400, cb),\n        /**\n         * Catches an unauthorized request (http code 401) and performs a callback.\n         */\n        unauthorized: cb => responseTypes.error(401, cb),\n        /**\n         * Catches a forbidden request (http code 403) and performs a callback.\n         */\n        forbidden: cb => responseTypes.error(403, cb),\n        /**\n         * Catches a \"not found\" request (http code 404) and performs a callback.\n         */\n        notFound: cb => responseTypes.error(404, cb),\n        /**\n         * Catches a timeout (http code 408) and performs a callback.\n         */\n        timeout: cb => responseTypes.error(408, cb),\n        /**\n         * Catches an internal server error (http code 500) and performs a callback.\n         */\n        internalError: cb => responseTypes.error(500, cb)\n    }\n\n    return responseTypes\n}\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport { resolver, WretcherError } from \"./resolver\"\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    protected constructor(\n        private _url: string,\n        private _options: RequestInit = {},\n        private _catchers: Map<number, (error: WretcherError) => void> = new Map()) {}\n\n    static factory(url = \"\", opts: RequestInit = {}) { return new Wretcher(url, opts) }\n    private selfFactory({ url = this._url, options = this._options, catchers = this._catchers } = {}) {\n        return new Wretcher(url, options, catchers)\n    }\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param opts New default options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    defaults(opts: RequestInit, mixin = false) {\n        conf.defaults = mixin ? conf.defaults = mix(conf.defaults, opts) : opts\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        conf.errorType = method\n        return this\n    }\n\n    /**\n     * Sets the non-global polyfills which will be used for every subsequent calls.\n     *\n     * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n     *\n     * @param polyfills An object containing the polyfills.\n     */\n    polyfills(polyfills: Partial<typeof conf.polyfills>) {\n        conf.polyfills = { ...conf.polyfills, ...polyfills}\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the url specified and the same options.\n     * @param url String url\n     */\n    url(url: string) {\n        return this.selfFactory({ url })\n    }\n\n    /**\n     * Returns a wretch factory which, when called, creates a new Wretcher object with the base url as an url prefix.\n     * @param baseurl The base url\n     */\n    baseUrl(baseurl: string) {\n        return (url = \"\", opts: RequestInit = {}) =>\n            this.selfFactory({ url: baseurl + url, options: mix(this._options, opts) })\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    options(options: RequestInit, mixin = false) {\n        return this.selfFactory({ options: mixin ? mix(this._options, options) : options })\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * ```\n     *\n     * @param qp An object which will be converted.\n     */\n    query(qp: object) {\n        return this.selfFactory({ url: appendQueryParams(this._url, qp) })\n    }\n\n    /**\n     * Set request headers.\n     * @param headerValues An object containing header keys and values\n     */\n    headers(headerValues: { [headerName: string]: any }) {\n        return this.selfFactory({ options: mix(this._options, { headers: headerValues }) })\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param headerValue Header value\n     */\n    accept(headerValue: string) {\n        return this.headers({ Accept : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Content-Type\" header.\n     * @param headerValue Header value\n     */\n    content(headerValue: string) {\n        return this.headers({ \"Content-Type\" : headerValue })\n    }\n\n    /**\n     * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n     * @param code Error code\n     * @param catcher: The catcher method\n     */\n    catcher(code: number, catcher: (error: WretcherError) => void) {\n        const newMap = new Map(this._catchers)\n        newMap.set(code, catcher)\n        return this.selfFactory({ catchers: newMap })\n    }\n\n    /**\n     * Performs a get request.\n     */\n    get(opts = {}) {\n        return resolver(this._url)(this._catchers)(mix(opts, this._options))\n    }\n    /**\n     * Performs a delete request.\n     */\n    delete(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"DELETE\" })\n    }\n    /**\n     * Performs a put request.\n     */\n    put(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"PUT\" })\n    }\n    /**\n     * Performs a post request.\n     */\n    post(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"POST\" })\n    }\n    /**\n     * Performs a patch request.\n     */\n    patch(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"PATCH\" })\n    }\n\n    /**\n     * Sets the request body with any content.\n     * @param contents The body contents\n     */\n    body(contents: any) {\n        return this.selfFactory({ options: { ...this._options, body: contents }})\n    }\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object which will be serialized into a JSON\n     */\n    json(jsObject: object) {\n        return this.content(\"application/json\").body(JSON.stringify(jsObject))\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object which will be converted to a FormData\n     */\n    formData(formObject: object) {\n        const formData = new (conf.polyfills.FormData || FormData)()\n        for(const key in formObject) {\n            if(formObject[key] instanceof Array) {\n                for(const item of formObject[key])\n                    formData.append(key + \"[]\", item)\n            } else {\n                formData.append(key, formObject[key])\n            }\n        }\n\n        return this.body(formData)\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: object) => {\n    const usp = new (conf.polyfills.URLSearchParams || URLSearchParams)()\n    const index = url.indexOf(\"?\")\n    for(const key in qp) {\n        if(qp[key] instanceof Array) {\n            for(const val of qp[key])\n                usp.append(key, val)\n        } else {\n            usp.append(key, qp[key])\n        }\n    }\n    return ~index ?\n        `${url.substring(0, index)}?${usp.toString()}` :\n        `${url}?${usp.toString()}`\n}\n","import { Wretcher } from \"./wretcher\"\n\n/**\n * Return a fresh Wretcher instance.\n */\nexport default Wretcher.factory\n"],"names":["mix","one","two","mergeArrays","clone","prop","hasOwnProperty","Array","defaults","errorType","polyfills","fetch","FormData","URLSearchParams","performance","PerformanceObserver","onMatch","entries","name","callback","_performance","matches","getEntriesByName","length","reverse","clearMeasures","perfs","callbacks","delete","size","observer","disconnect","clearResourceTimings","lazyObserver","_observer","forEach","Map","observe","conf","self","entryTypes","set","resolver","url","catchers","opts","req","wrapper","then","response","ok","_","err","Error","status","doCatch","promise","catch","has","get","wrapTypeParser","funName","cb","responseTypes","res","json","blob","formData","arrayBuffer","text","error","code","badRequest","unauthorized","forbidden","notFound","timeout","internalError","_url","_options","_catchers","this","Wretcher","_a","_b","_c","_d","options","_e","mixin","method","selfFactory","baseurl","_this","qp","appendQueryParams","headerValues","headers","headerValue","Accept","Content-Type","catcher","newMap","contents","body","jsObject","content","JSON","stringify","formObject","key","_i","item","append","usp","index","indexOf","val","substring","toString","factory"],"mappings":"0VAAO,IAAMA,EAAM,SAASC,EAAaC,EAAaC,GAClD,gBADkDA,OAC9CF,IAAQC,GAAsB,iBAARD,GAAmC,iBAARC,EACjD,OAAOD,EAEX,IAAMG,OAAaH,GACnB,IAAI,IAAMI,KAAQH,EACXA,EAAII,eAAeD,KACfH,EAAIG,aAAiBE,OAASN,EAAII,aAAiBE,MAClDH,EAAMC,GAAQF,EAAmBF,EAAII,UAAUH,EAAIG,IAAUH,EAAIG,GACtC,iBAAdH,EAAIG,IAA2C,iBAAdJ,EAAII,GAClDD,EAAMC,GAAQL,EAAIC,EAAII,GAAOH,EAAIG,GAAOF,GAExCC,EAAMC,GAAQH,EAAIG,IAK9B,OAAOD,MCfPI,YAEAC,UAAW,KAEXC,WACIC,MAAO,KACPC,SAAU,KACVC,gBAAiB,KACjBC,YAAa,KACbC,oBAAqB,OCTvBC,EAAU,SAACC,EAASC,EAAMC,EAAUC,GACtC,IAAMC,EAAUJ,EAAQK,iBAAiBJ,GACzC,SAAGG,GAAWA,EAAQE,OAAS,KAC3BJ,EAASE,EAAQG,UAAU,IAC3BJ,EAAaK,cAAcP,GAC3BQ,EAAMC,UAAUC,OAAOV,GAEpBQ,EAAMC,UAAUE,KAAO,IACtBH,EAAMI,SAASC,aACZX,EAAaY,sBACZZ,EAAaY,yBAGd,IAKTC,EAAe,SAACb,EAAcc,GAShC,OARIR,EAAMI,UAAYV,GAAgBc,IAClCR,EAAMI,SAAW,IAAII,EAAU,SAAAjB,GAC3BS,EAAMC,UAAUQ,QAAQ,SAAChB,EAAUD,GAC/BF,EAAQC,EAASC,EAAMC,EAAUC,OAGtCA,EAAaY,sBAAsBZ,EAAaY,wBAEhDN,EAAMI,UAGXJ,GACFC,UAAW,IAAIS,IACfN,SAAU,KACVO,QAAS,SAACnB,EAAMC,GACZ,GAAID,GAASC,EAAb,CAGA,IAAMC,EAAekB,EAAK5B,UAAUI,cAAgC,oBAATyB,KAAuBA,KAAkB,YAAI,MAClGL,EAAaI,EAAK5B,UAAUK,sBAAwC,oBAATwB,KAAuBA,KAA0B,oBAAI,MAElHN,EAAab,EAAcc,KAG3BlB,EAAQI,EAAcF,EAAMC,EAAUC,KACnCM,EAAMC,UAAUE,KAAO,GACtBH,EAAMI,SAASO,SAAUG,YAAa,WAAY,aACtDd,EAAMC,UAAUc,IAAIvB,EAAMC,QC1CzBuB,EAAW,SAAAC,GAAO,OAAA,SAACC,GAAsE,oBAAtEA,MAA4DR,KAAU,SAACS,gBAAAA,MACnG,IAAMC,GAAOR,EAAK5B,UAAUC,OAASA,OAAOgC,EAAK3C,EAAIsC,EAAK9B,SAAUqC,IAC9DE,EAAoCD,EAAIE,KAAK,SAAAC,GAC/C,OAAKA,EAASC,GASPD,EARIA,EAASX,EAAK7B,WAAa,UAAUuC,KAAK,SAAAG,GAC7C,IAAMC,EAAM,IAAIC,MAAMF,GAItB,MAHAC,EAAId,EAAK7B,WAAa0C,EACtBC,EAAY,OAAIH,EAASK,OACzBF,EAAc,SAAIH,EACZG,MAQZG,EAAU,SAAIC,GAChB,OAAOA,EAAQC,MAAM,SAAAL,GACjB,IAAGR,EAASc,IAAIN,EAAIE,QAGhB,MAAMF,EAFNR,EAASe,IAAIP,EAAIE,OAAjBV,CAAyBQ,MAK/BQ,EAA6B,SAAIC,GAAY,OAAA,SAAIC,GAAO,OAC1DP,EAD0DM,EAClDd,EAAQC,KAAK,SAAAG,GAAK,OAAAA,GAAKA,EAAEU,OAAYb,KAAK,SAAAG,GAAK,OAAAA,GAAKW,GAAMA,EAAGX,IAAMA,IACnEJ,EAAQC,KAAK,SAAAG,GAAK,OAAAA,GAAKW,GAAMA,EAAGX,IAAMA,OAE5CY,GAmBFC,IAAKJ,EAAyB,MAI9BK,KAAML,EAAoB,QAI1BM,KAAMN,EAAqB,QAI3BO,SAAUP,EAAyB,YAInCQ,YAAaR,EAA4B,eAIzCS,KAAMT,EAAuB,QAM7BlC,MAAO,SAAAoC,GAEH,OADAhB,EAAIE,KAAK,SAAAgB,GAAO,OAAAtC,EAAMW,QAAQ2B,EAAIrB,IAAKmB,KAChCC,GAKXO,eAAMC,EAAcT,GAEhB,OADAlB,EAASH,IAAI8B,EAAMT,GACZC,GAKXS,WAAY,SAAAV,GAAM,OAAAC,EAAcO,MAAM,IAAKR,IAI3CW,aAAc,SAAAX,GAAM,OAAAC,EAAcO,MAAM,IAAKR,IAI7CY,UAAW,SAAAZ,GAAM,OAAAC,EAAcO,MAAM,IAAKR,IAI1Ca,SAAU,SAAAb,GAAM,OAAAC,EAAcO,MAAM,IAAKR,IAIzCc,QAAS,SAAAd,GAAM,OAAAC,EAAcO,MAAM,IAAKR,IAIxCe,cAAe,SAAAf,GAAM,OAAAC,EAAcO,MAAM,IAAKR,KAGlD,OAAOC,kBC1GP,WACYe,EACAC,EACAC,gBADAD,mBACAC,MAA6D5C,KAF7D6C,UAAAH,EACAG,cAAAF,EACAE,eAAAD,EAmLhB,OAjLWE,UAAP,SAAevC,EAAUE,GAA0B,oBAApCF,mBAAUE,MAAiC,IAAIqC,EAASvC,EAAKE,IACpEqC,wBAAR,SAAoBC,OAAAC,kBAAEC,QAAA1C,yBAAiB2C,YAAAC,6BAAyBC,aAC5D,OAAO,IAAIN,EAASvC,EAAK4C,gCAQ7BL,qBAAA,SAASrC,EAAmB4C,GAExB,oBAFwBA,MACxBnD,EAAK9B,SAAWiF,EAAQnD,EAAK9B,SAAWR,EAAIsC,EAAK9B,SAAUqC,GAAQA,EAC5DoC,MAUXC,sBAAA,SAAUQ,GAEN,OADApD,EAAK7B,UAAYiF,EACVT,MAUXC,sBAAA,SAAUxE,GAEN,OADA4B,EAAK5B,eAAiB4B,EAAK5B,UAAcA,GAClCuE,MAOXC,gBAAA,SAAIvC,GACA,OAAOsC,KAAKU,aAAchD,SAO9BuC,oBAAA,SAAQU,GAAR,WACI,OAAO,SAACjD,EAAUE,GACd,oBADIF,mBAAUE,MACdgD,EAAKF,aAAchD,IAAKiD,EAAUjD,EAAK4C,QAASvF,EAAI6F,EAAKd,SAAUlC,OAQ3EqC,oBAAA,SAAQK,EAAsBE,GAC1B,oBAD0BA,MACnBR,KAAKU,aAAcJ,QAASE,EAAQzF,EAAIiF,KAAKF,SAAUQ,GAAWA,KAc7EL,kBAAA,SAAMY,GACF,OAAOb,KAAKU,aAAchD,IAAKoD,EAAkBd,KAAKH,KAAMgB,MAOhEZ,oBAAA,SAAQc,GACJ,OAAOf,KAAKU,aAAcJ,QAASvF,EAAIiF,KAAKF,UAAYkB,QAASD,OAOrEd,mBAAA,SAAOgB,GACH,OAAOjB,KAAKgB,SAAUE,OAASD,KAOnChB,oBAAA,SAAQgB,GACJ,OAAOjB,KAAKgB,SAAUG,eAAiBF,KAQ3ChB,oBAAA,SAAQX,EAAc8B,GAClB,IAAMC,EAAS,IAAIlE,IAAI6C,KAAKD,WAE5B,OADAsB,EAAO7D,IAAI8B,EAAM8B,GACVpB,KAAKU,aAAc/C,SAAU0D,KAMxCpB,gBAAA,SAAIrC,GACA,oBADAA,MACOH,EAASuC,KAAKH,KAAdpC,CAAoBuC,KAAKD,UAAzBtC,CAAoC1C,EAAI6C,EAAMoC,KAAKF,YAK9DG,mBAAA,SAAOrC,GACH,oBADGA,MACIH,EAASuC,KAAKH,KAAdpC,CAAoBuC,KAAKD,UAAzBtC,MAAyC1C,EAAI6C,EAAMoC,KAAKF,WAAWW,OAAQ,aAKtFR,gBAAA,SAAIrC,GACA,oBADAA,MACOH,EAASuC,KAAKH,KAAdpC,CAAoBuC,KAAKD,UAAzBtC,MAAyC1C,EAAI6C,EAAMoC,KAAKF,WAAWW,OAAQ,UAKtFR,iBAAA,SAAKrC,GACD,oBADCA,MACMH,EAASuC,KAAKH,KAAdpC,CAAoBuC,KAAKD,UAAzBtC,MAAyC1C,EAAI6C,EAAMoC,KAAKF,WAAWW,OAAQ,WAKtFR,kBAAA,SAAMrC,GACF,oBADEA,MACKH,EAASuC,KAAKH,KAAdpC,CAAoBuC,KAAKD,UAAzBtC,MAAyC1C,EAAI6C,EAAMoC,KAAKF,WAAWW,OAAQ,YAOtFR,iBAAA,SAAKqB,GACD,OAAOtB,KAAKU,aAAcJ,aAAcN,KAAKF,UAAUyB,KAAMD,OAMjErB,iBAAA,SAAKuB,GACD,OAAOxB,KAAKyB,QAAQ,oBAAoBF,KAAKG,KAAKC,UAAUH,KAMhEvB,qBAAA,SAAS2B,GACL,IAAM1C,EAAW,IAAK7B,EAAK5B,UAAUE,UAAYA,UACjD,IAAI,IAAMkG,KAAOD,EACb,GAAGA,EAAWC,aAAgBvG,MAC1B,IAAkB,QAAA4E,EAAA0B,EAAWC,GAAXC,WAAAA,KAAd,IAAMC,OACN7C,EAAS8C,OAAOH,EAAM,KAAME,QAEhC7C,EAAS8C,OAAOH,EAAKD,EAAWC,IAIxC,OAAO7B,KAAKuB,KAAKrC,SAMnB4B,EAAoB,SAACpD,EAAamD,GACpC,IAAMoB,EAAM,IAAK5E,EAAK5B,UAAUG,iBAAmBA,iBAC7CsG,EAAQxE,EAAIyE,QAAQ,KAC1B,IAAI,IAAMN,KAAOhB,EACb,GAAGA,EAAGgB,aAAgBvG,MAClB,IAAiB,QAAA4E,EAAAW,EAAGgB,GAAHC,WAAAA,KAAb,IAAMM,OACNH,EAAID,OAAOH,EAAKO,QAEpBH,EAAID,OAAOH,EAAKhB,EAAGgB,IAG3B,OAAQK,EACDxE,EAAI2E,UAAU,EAAGH,OAAUD,EAAIK,WAC/B5E,MAAOuE,EAAIK,mBC7MPrC,EAASsC"}