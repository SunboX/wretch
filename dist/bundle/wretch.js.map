{"version":3,"file":"wretch.js","sources":["../../src/mix.ts","../../src/config.ts","../../src/perfs.ts","../../src/resolver.ts","../../src/wretcher.ts","../../src/index.ts"],"sourcesContent":["export const mix = function(one: object, two: object, mergeArrays: boolean = false) {\n    if(!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n        return one\n\n    const clone = { ...one }\n    for(const prop in two) {\n        if(two.hasOwnProperty(prop)) {\n            if(two[prop] instanceof Array && one[prop] instanceof Array) {\n                clone[prop] = mergeArrays ? [ ...one[prop], ...two[prop] ] : two[prop]\n            } else if(typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n                clone[prop] = mix(one[prop], two[prop], mergeArrays)\n            } else {\n                clone[prop] = two[prop]\n            }\n        }\n    }\n\n    return clone\n}\n","declare const global\n\nconst config = {\n    // Default options\n    defaults: {},\n    // Error type\n    errorType: null,\n    // Polyfills\n    polyfills: {\n        fetch: null,\n        FormData: null,\n        URLSearchParams: null,\n        performance: null,\n        PerformanceObserver: null,\n        AbortController: null\n    },\n    polyfill(p: string, doThrow = true, instance = false, ...args) {\n        const res = this.polyfills[p] ||\n            (typeof self !== \"undefined\" ? self[p] : null) ||\n            (typeof global !== \"undefined\" ? global[p] : null)\n        if(doThrow && !res) throw new Error(p + \" is not defined\")\n        return instance && res ? new res(...args) : res\n    }\n}\n\nexport default config\n","import conf from \"./config\"\n\nconst onMatch = (entries, name, callback, _performance) => {\n    const matches = entries.getEntriesByName(name)\n    if(matches && matches.length > 0) {\n        callback(matches.reverse()[0])\n        _performance.clearMeasures(name)\n        perfs.callbacks.delete(name)\n\n        if(perfs.callbacks.size < 1) {\n            perfs.observer.disconnect()\n            if(_performance.clearResourceTimings) {\n                _performance.clearResourceTimings()\n            }\n        }\n        return true\n    }\n    return false\n}\n\nconst lazyObserver = (_performance, _observer) => {\n    if(!perfs.observer && _performance && _observer) {\n        perfs.observer = new _observer(entries => {\n            perfs.callbacks.forEach((callback, name) => {\n                onMatch(entries, name, callback, _performance)\n            })\n        })\n        if(_performance.clearResourceTimings) _performance.clearResourceTimings()\n    }\n    return perfs.observer\n}\n\nconst perfs = {\n    callbacks: new Map(),\n    observer: null,\n    observe: (name, callback) => {\n        if(!name || !callback)\n            return\n\n        const _performance = conf.polyfill(\"performance\", false)\n        const _observer  = conf.polyfill(\"PerformanceObserver\", false)\n\n        if(!lazyObserver(_performance, _observer))\n            return\n\n        if(!onMatch(_performance, name, callback, _performance)) {\n            if(perfs.callbacks.size < 1)\n                perfs.observer.observe({ entryTypes: [\"resource\", \"measure\"] })\n            perfs.callbacks.set(name, callback)\n        }\n\n    }\n}\n\nexport default perfs\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport perfs from \"./perfs\"\n\nexport type WretcherError = Error & { status: number, response: Response, text?: string, json?: any }\n\nexport const resolver = url => (catchers: Map<number, (error: WretcherError) => void> = new Map()) => (opts = {}) => {\n    type TypeParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Result>\n\n    const finalOpts = mix(conf.defaults, opts)\n    const fetchController = conf.polyfill(\"AbortController\", false, true)\n    if(!finalOpts[\"signal\"] && fetchController) {\n        finalOpts[\"signal\"] = fetchController.signal\n    }\n\n    const req = conf.polyfill(\"fetch\")(url, finalOpts)\n    const wrapper: Promise<void | Response> = req.then(response => {\n        if (!response.ok) {\n            return response[conf.errorType || \"text\"]().then(_ => {\n                const err = new Error(_)\n                err[conf.errorType] = _\n                err[\"status\"] = response.status\n                err[\"response\"] = response\n                throw err\n            })\n        }\n        return response\n    })\n\n    const nameCatchers = new Map()\n    const doCatch = <T>(promise: Promise<T>): Promise<void | T> => {\n        return promise.catch(err => {\n            if(catchers.has(err.status))\n                catchers.get(err.status)(err)\n            else if(nameCatchers.has(err.name))\n                nameCatchers.get(err.name)(err)\n            else\n                throw err\n        })\n    }\n    const wrapTypeParser: TypeParser = <T>(funName) => <R>(cb) => funName ?\n        doCatch(wrapper.then(_ => _ && _[funName]()).then(_ => _ && cb && cb(_) || _)) :\n        doCatch(wrapper.then(_ => _ && cb && cb(_) || _))\n\n    const responseChain: {\n        // Response types\n        res: <Result = Response>(cb?: (type: Response) => Result) => Promise<Result>,\n        json: <Result = {[key: string]: any}>(cb?: (type: {[key: string]: any}) => Result) => Promise<Result>,\n        blob: <Result = Blob>(cb?: (type: Blob) => Result) => Promise<Result>,\n        formData: <Result = FormData>(cb?: (type: FormData) => Result) => Promise<Result>,\n        arrayBuffer: <Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result) => Promise<Result>,\n        text: <Result = string>(cb?: (type: string) => Result) => Promise<Result>,\n        // Extras\n        perfs: (cb?: (type: any) => void) => typeof responseChain,\n        setTimeout: (time: number, controller: any) => typeof responseChain,\n        controller: () => [any, typeof responseChain],\n        // Catchers\n        error: (code: (number | string), cb: any) => typeof responseChain,\n        badRequest: (cb: (error: WretcherError) => void) => typeof responseChain,\n        unauthorized: (cb: (error: WretcherError) => void) => typeof responseChain,\n        forbidden: (cb: (error: WretcherError) => void) => typeof responseChain,\n        notFound: (cb: (error: WretcherError) => void) => typeof responseChain,\n        timeout: (cb: (error: WretcherError) => void) => typeof responseChain,\n        internalError: (cb: (error: WretcherError) => void) => typeof responseChain,\n        onAbort: (cb: (error: Error) => void) => typeof responseChain\n    } = {\n        /**\n         * Retrieves the raw result as a promise.\n         */\n        res: wrapTypeParser<Response>(null),\n        /**\n         * Retrieves the result as a parsed JSON object.\n         */\n        json: wrapTypeParser<any>(\"json\"),\n        /**\n         * Retrieves the result as a Blob object.\n         */\n        blob: wrapTypeParser<Blob>(\"blob\"),\n        /**\n         * Retrieves the result as a FormData object.\n         */\n        formData: wrapTypeParser<FormData>(\"formData\"),\n        /**\n         * Retrieves the result as an ArrayBuffer object.\n         */\n        arrayBuffer: wrapTypeParser<ArrayBuffer>(\"arrayBuffer\"),\n        /**\n         * Retrieves the result as a string.\n         */\n        text: wrapTypeParser<string>(\"text\"),\n        /**\n         * Performs a callback on the API performance timings of the request.\n         *\n         * Warning: Still experimental on browsers and node.js\n         */\n        perfs: cb => {\n            req.then(res => perfs.observe(res.url, cb))\n            return responseChain\n        },\n        /**\n         * Aborts the request after a fixed time.\n         *\n         * @param time Time in milliseconds\n         * @param controller A custom controller\n         */\n        setTimeout: (time, controller = fetchController) => {\n            setTimeout(() => controller.abort(), time)\n            return responseChain\n        },\n        /**\n         * Returns the automatically generated AbortController alongside the current wretch response as a pair.\n         */\n        controller: () => [ fetchController, responseChain ],\n        /**\n         * Catches an http response with a specific error code and performs a callback.\n         */\n        error(code, cb) {\n            typeof code === \"string\" ?\n                nameCatchers.set(code, cb) :\n                catchers.set(code, cb)\n            return responseChain\n        },\n        /**\n         * Catches a bad request (http code 400) and performs a callback.\n         */\n        badRequest: cb => responseChain.error(400, cb),\n        /**\n         * Catches an unauthorized request (http code 401) and performs a callback.\n         */\n        unauthorized: cb => responseChain.error(401, cb),\n        /**\n         * Catches a forbidden request (http code 403) and performs a callback.\n         */\n        forbidden: cb => responseChain.error(403, cb),\n        /**\n         * Catches a \"not found\" request (http code 404) and performs a callback.\n         */\n        notFound: cb => responseChain.error(404, cb),\n        /**\n         * Catches a timeout (http code 408) and performs a callback.\n         */\n        timeout: cb => responseChain.error(408, cb),\n        /**\n         * Catches an internal server error (http code 500) and performs a callback.\n         */\n        internalError: cb => responseChain.error(500, cb),\n        /**\n         * Catches an AbortError and performs a callback.\n         */\n        onAbort: cb => responseChain.error(\"AbortError\", cb)\n    }\n\n    return responseChain\n}\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport { resolver, WretcherError } from \"./resolver\"\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    protected constructor(\n        private _url: string,\n        private _options: RequestInit = {},\n        private _catchers: Map<number, (error: WretcherError) => void> = new Map()) {}\n\n    static factory(url = \"\", opts: RequestInit = {}) { return new Wretcher(url, opts) }\n    private selfFactory({ url = this._url, options = this._options, catchers = this._catchers } = {}) {\n        return new Wretcher(url, options, catchers)\n    }\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param opts New default options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    defaults(opts: RequestInit, mixin = false) {\n        conf.defaults = mixin ? conf.defaults = mix(conf.defaults, opts) : opts\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        conf.errorType = method\n        return this\n    }\n\n    /**\n     * Sets the non-global polyfills which will be used for every subsequent calls.\n     *\n     * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n     *\n     * @param polyfills An object containing the polyfills.\n     */\n    polyfills(polyfills: Partial<typeof conf.polyfills>) {\n        conf.polyfills = { ...conf.polyfills, ...polyfills}\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the argument url appended and the same options.\n     * @param url String url\n     * @param replace Boolean it true, replaces the current url instead of appending\n     */\n    url(url: string, replace = false) {\n        return replace ? this.selfFactory({ url }) : this.selfFactory({ url: this._url + url })\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    options(options: RequestInit, mixin = false) {\n        return this.selfFactory({ options: mixin ? mix(this._options, options) : options })\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * ```\n     *\n     * @param qp An object which will be converted.\n     */\n    query(qp: object) {\n        return this.selfFactory({ url: appendQueryParams(this._url, qp) })\n    }\n\n    /**\n     * Set request headers.\n     * @param headerValues An object containing header keys and values\n     */\n    headers(headerValues: { [headerName: string]: any }) {\n        return this.selfFactory({ options: mix(this._options, { headers: headerValues }) })\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param headerValue Header value\n     */\n    accept(headerValue: string) {\n        return this.headers({ Accept : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Content-Type\" header.\n     * @param headerValue Header value\n     */\n    content(headerValue: string) {\n        return this.headers({ \"Content-Type\" : headerValue })\n    }\n\n    /**\n     * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n     * @param code Error code\n     * @param catcher: The catcher method\n     */\n    catcher(code: number, catcher: (error: WretcherError) => void) {\n        const newMap = new Map(this._catchers)\n        newMap.set(code, catcher)\n        return this.selfFactory({ catchers: newMap })\n    }\n\n    /**\n     * Associates a custom signal with the request.\n     * @param controller : An AbortController\n     */\n    signal(controller: any) {\n        return this.selfFactory({ options: { ...this._options, signal: controller.signal } as any })\n    }\n\n    /**\n     * Performs a get request.\n     */\n    get(opts = {}) {\n        return resolver(this._url)(this._catchers)(mix(opts, this._options))\n    }\n    /**\n     * Performs a delete request.\n     */\n    delete(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"DELETE\" })\n    }\n    /**\n     * Performs a put request.\n     */\n    put(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"PUT\" })\n    }\n    /**\n     * Performs a post request.\n     */\n    post(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"POST\" })\n    }\n    /**\n     * Performs a patch request.\n     */\n    patch(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"PATCH\" })\n    }\n\n    /**\n     * Sets the request body with any content.\n     * @param contents The body contents\n     */\n    body(contents: any) {\n        return this.selfFactory({ options: { ...this._options, body: contents }})\n    }\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object which will be serialized into a JSON\n     */\n    json(jsObject: object) {\n        return this.content(\"application/json\").body(JSON.stringify(jsObject))\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object which will be converted to a FormData\n     */\n    formData(formObject: object) {\n        return this.body(convertFormData(formObject))\n    }\n    /**\n     * Converts the input to an url encoded string and sets the content-type header and body.\n     * If the input argument is already a string, skips the conversion part.\n     *\n     * @param input An object to convert into an url encoded string or an already encoded string\n     */\n    formUrl(input: (object | string)) {\n        return this\n            .body(typeof input === \"string\" ? input : convertFormUrl(input))\n            .content(\"application/x-www-form-urlencoded\")\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: object) => {\n    const usp = conf.polyfill(\"URLSearchParams\", true, true)\n    const index = url.indexOf(\"?\")\n    for(const key in qp) {\n        if(qp[key] instanceof Array) {\n            for(const val of qp[key])\n                usp.append(key, val)\n        } else {\n            usp.append(key, qp[key])\n        }\n    }\n    return ~index ?\n        `${url.substring(0, index)}?${usp.toString()}` :\n        `${url}?${usp.toString()}`\n}\n\nconst convertFormData = (formObject: object) => {\n    const formData = conf.polyfill(\"FormData\", true, true)\n    for(const key in formObject) {\n        if(formObject[key] instanceof Array) {\n            for(const item of formObject[key])\n                formData.append(key + \"[]\", item)\n        } else {\n            formData.append(key, formObject[key])\n        }\n    }\n\n    return formData\n}\n\nconst convertFormUrl = (formObject: object) => {\n    return Object.keys(formObject)\n        .map(key =>\n            encodeURIComponent(key) + \"=\" +\n            `${ encodeURIComponent(typeof formObject[key] === \"object\" ? JSON.stringify(formObject[key]) : formObject[key]) }`)\n        .join(\"&\")\n}\n","import { Wretcher } from \"./wretcher\"\n\n/**\n * Return a fresh Wretcher instance.\n */\nexport default Wretcher.factory\n"],"names":["mix","one","two","mergeArrays","clone","prop","hasOwnProperty","Array","config","defaults","errorType","polyfills","fetch","FormData","URLSearchParams","performance","PerformanceObserver","AbortController","polyfill","p","doThrow","instance","_i","args","res","this","self","global","Error","onMatch","entries","name","callback","_performance","matches","getEntriesByName","length","reverse","clearMeasures","perfs","callbacks","delete","size","observer","disconnect","clearResourceTimings","lazyObserver","_observer","forEach","Map","observe","conf","entryTypes","set","resolver","url","catchers","opts","finalOpts","fetchController","signal","req","wrapper","then","response","ok","_","err","status","nameCatchers","doCatch","promise","catch","has","get","wrapTypeParser","funName","cb","responseChain","json","blob","formData","arrayBuffer","text","setTimeout","time","controller","abort","error","code","badRequest","unauthorized","forbidden","notFound","timeout","internalError","onAbort","_url","_options","_catchers","Wretcher","_a","_b","_c","_d","options","_e","mixin","method","replace","selfFactory","qp","appendQueryParams","headerValues","headers","headerValue","Accept","Content-Type","catcher","newMap","__assign","contents","body","jsObject","content","JSON","stringify","formObject","convertFormData","input","convertFormUrl","usp","index","indexOf","key","val","append","substring","toString","item","Object","keys","map","encodeURIComponent","join","factory"],"mappings":"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"}